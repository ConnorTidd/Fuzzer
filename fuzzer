#!/usr/bin/env python3

# Useful functions for dealing with files and file paths
import sys, os

# Deals with the command line arguments to the fuzzer
import argparse

import math
# Used for parsing the model specification XML file
import xml.etree.ElementTree as ET

# Utility function for printing "pretty" lists, tuples, etc.
import pprint

# Extremely useful functions in here ;)
import itertools

# Why would we need this module?
import subprocess

# Loads the model specification from a given XML file.
# No need to modify this function.
def load_model(xml_file):
    try:
        tree = ET.parse(xml_file)
    except:
        print('Error: Unable to parse the given XML file. Perhaps it has a syntax error?')
        sys.exit(-1)

    root = tree.getroot()

    optional_args = []
    positional_args = []

    opts = root.find('options')
    if opts:
        for opt in opts.iter('option'):
            optional_args.append((opt[0].text, opt[1].text))

    pos = root.find('positional')
    if pos:
        for arg in pos.iter('arg'):
            positional_args.append(arg[0].text)

    return optional_args, positional_args

# Exit the fuzzer if a non-existant file is passed in as a command line argument
# No need to modify this function.
def ensure_file_existence(file_path):
    if not os.path.isfile(file_path):
        print('Error: the file {} does not exist. Please check the path'.format(file_path))
        sys.exit(-1)

# Handle the command line arguments for the fuzzer.
# No need to modify this function.
def handle_cmd_line():
    parser = argparse.ArgumentParser()
    parser.add_argument("config")
    parser.add_argument("binary")
    args = parser.parse_args()

    if not args.config.endswith('.xml'):
        print('Error: the first parameter should end in an .xml extension')
        sys.exit(-1)

    ensure_file_existence(args.config)
    ensure_file_existence(args.binary)

    if not os.access(args.binary, os.X_OK):
        print('Error: {} is not executable'.format(args.binary))
        sys.exit(-1)

    return args




















#returns a list of potential value for the given type
def getOptInsert(type):
    if type == 'string':
        return "string"
    else:
        return "1"

# Creates a powerset of possible commands to test
#  filepath, optionalArguments, required arguments
def powerset(pathToCommand, opts, pargs):
    optArgumentOptionsList = list()
    posArgumentList = list()
    for opt in opts:
        optArgumentOptionsList.append(permuteOptions(opt))
    for positional in pargs:
        posArgumentList.append(permuteType(positional))
    #pprint.pprint(optArgumentOptionsList)
    addedOptionals = addAllOptionals(optArgumentOptionsList, [['./' + pathToCommand]])
    addedRequired = addAllOptionals(posArgumentList, addedOptionals)

    return addedRequired

def addAllOptionals(opts, givenlist):
    optArgumentOptionsList = list()
    finalList = givenlist.copy()

    for optionsList in opts:
        accCommands = list()
        for option in optionsList:
            for command in finalList:
                cCopy = command.copy()
                cCopy.extend(option)
                accCommands.append(cCopy)
        finalList.extend(accCommands)
        accCommands = list()

    return finalList

def newAddAllOptionals(opts):
    listOfOptionals = list()
    test = list()
    test.extend([[]])
    for x in range(len(opts) + 1):

        listOfOptionals.extend(addXArgumentCommands(x, opts, listOfOptionals))

    return listOfOptionals


def oldaddXArgumentCommands(x, opts):
    listOfOptionsToAdd = list()
    commandList = list()
    commandList.append([])
    newCommandList = list()
    newCommandList.append([])
    #builds a list of x option types
    for i in range(x):
        listOfOptionsToAdd.append(opts[i])

    #pprint.pprint(listOfOptionsToAdd)
    #have a list of option types
    #for each option type, add all the permutations
    for option in listOfOptionsToAdd:
        optionalOptions = permuteOptions(option)
        newCommandList = list()
        #have a list of possible entries for the option
        #append each possible entry to list of commands we have
        for optionalOption in optionalOptions:
            for command in commandList:
                commandCopy = command.copy()
                commandCopy.extend(optionalOption)
                #pprint.pprint(commandCopy)
                newCommandList.append(commandCopy)
        commandList = newCommandList.copy()

    return newCommandList

def addXArgumentCommands(opts):
    listOfOptionsToAdd = list()
    commandList = list()
    commandList.append([])
    newCommandList = list()

    #pprint.pprint(listOfOptionsToAdd)
    #have a list of option types
    #for each option type, add all the permutations
    for option in opts:
        optionalOptions = permuteOptions(option)
        #have a list of possible entries for the option
        #append each possible entry to list of commands we have
        for command in commandList:
            for optionalOption in optionalOptions:
                commandCopy = command.copy()
                commandCopy.extend(optionalOption)
                newCommandList.append(commandCopy)


    return newCommandList

def permuteOptions(option):
    commandList = list()
    type = option[1]
    call = option[0]

    types = permuteType(type)
    for command in types:
        commandList.append([call,command])

    return commandList


def permuteType(type):
    stringTestList = ['', 'n',  '#']
    intTestList = ['1','0','-1', '6500000']
    commandList = list()

    if type == 'string':
        for string in stringTestList:
            commandList.append(string)
    if type == 'integer':
        for integer in intTestList:
            commandList.append(integer)
    if type == 'null':
        commandList.append('')

    return commandList

#pprint.pprint(permuteOptions(('--s', 'string')))
def newPowerSet(set):
    wholeList = list()
    setSize = len(set)
    powerSetSize = (int) (math.pow(2, setSize))
    for b in range(powerSetSize):
        innerList = list()
        factor = setSize - 1
        while b > 0:
            z = math.pow(2, factor)
            if(z <= b):
                innerList.append(set[factor])
                b = b - z

            factor = factor - 1

        wholeList.append(innerList)

    return wholeList

# Driver program to test printPowerSet
set = ['a', 'b', 'c'];
#pprint.pprint(newPowerSet(set));
#pprint.pprint(addAllOptionals([['--food', 'string'], ['--place', 'string']], [[]]));


#pprint.pprint(newAddAllOptionals([['--food', 'string'], ['--place', 'string']]))
#pprint.pprint(addXArgumentCommands([['--food', 'string'], ['--place', 'string']]))
def asda(stuffList, thingsToSplit, times):
    if(times < 1):
        return thingsToSplit
    else:
        newList = list()
        for thing in thingsToSplit:
            newList.append(thing)
            for stuff in stuffList:
                    thingC = thing.copy()
                    thingC.append(stuff)
                    newList.append(thingC)

    return asda(stuffList, newList, times - 1)



# main() begins here

# Deal with the command line. The parameter values will be available in
# args.config and args.binary.
args = handle_cmd_line()
# Load the model specification.
opts, pargs = load_model(args.config)

#p = subprocess.Popen(['python ', args.binary, '--quantity', '1', 'taco', 'place'], stdout = subprocess.PIPE, stderr= subprocess.PIPE)
#output, error = p.communicate()
#pprint.pprint(error.decode("utf-8"))
#sbc = subprocess.call('python '+ args.binary + ' --quantity 1 taco' + ' place', stdout = subprocess.DEVNULL, stderr=subprocess.DEVNULL)
#pprint.pprint(powerset(args.binary, opts, pargs))
#powSet = powerset(args.binary, opts, pargs)
for command in powerset(args.binary, opts, pargs):
    p = subprocess.Popen(command, stdout = subprocess.PIPE, stderr= subprocess.PIPE)
    output, error = p.communicate()
    if(len(error.decode("utf-8")) > 2):
        pprint.pprint(command)

# Print out the optional and positional arguments.
# Note: remove this from your final submission.
#pprint.pprint(opts)
#pprint.pprint(pargs)
